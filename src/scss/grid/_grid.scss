@import '@/scss/helpers';
@import '@/scss/functions';
@import '@/scss/mixins';

// ============================================================
// Name:            Grid
// Description:     Component to create responsive, fluid and nestable grids
//
// Component:       `#{$prefix}grid`
//
// Modifiers:       `#{$prefix}grid-small`
//                  `#{$prefix}grid-medium`
//                  `#{$prefix}grid-large`
//                  `#{$prefix}grid-collapse`
//                  `#{$prefix}grid-divider`
//                  `#{$prefix}grid-match`
//                  `#{$prefix}grid-stack`
//                  `#{$prefix}grid-margin`
//                  `#{$prefix}grid-margin-small`
//                  `#{$prefix}grid-margin-medium`
//                  `#{$prefix}grid-margin-large`
//                  `#{$prefix}grid-margin-collapse`
//
// Sub-Modifiers:   `#{$prefix}grid-item-match`
//
// States:          `#{$prefix}first-column`
//
// ============================================================

// Variables
// ============================================================

$grid-gutter-horizontal: gutter(small) !default;
$grid-gutter-vertical: $grid-gutter-horizontal !default;
$grid-gutter-horizontal-l: gutter(medium) !default;
$grid-gutter-vertical-l: $grid-gutter-horizontal-l !default;

$grid-small-gutter-horizontal: gutter(xsmall) !default;
$grid-small-gutter-vertical: $grid-small-gutter-horizontal !default;

$grid-medium-gutter-horizontal: gutter(medium) !default;
$grid-medium-gutter-vertical: $grid-medium-gutter-horizontal !default;

$grid-large-gutter-horizontal: gutter(medium) !default;
$grid-large-gutter-vertical: $grid-large-gutter-horizontal !default;
$grid-large-gutter-horizontal-l: gutter(large) !default;
$grid-large-gutter-vertical-l: $grid-large-gutter-horizontal-l !default;

$grid-divider-border-width: border(width) !default;
$grid-divider-border: border(color) !default;

/* ============================================================
    Component: Grid
   ============================================================ */

/*
 * 1. Allow cells to wrap in to the next line
 * 2. Reset list
 */

.#{$prefix}grid {
	display: flex;

	/* 1 */
	flex-wrap: wrap;
	margin: 0;
	padding: 0;
	list-style: none;
}

/*
 * Grid cell
 * Note: Space is allocated solely based on content dimensions, but
 *       shrinks: 0 1 auto
 * Reset margin for e.g. paragraphs
 */

.#{$prefix}grid > * {
	margin: 0;
}

/*
 * Remove margin from the last-child
 */

.#{$prefix}margin > * > :last-child {
	margin-bottom: 0;
}

/* Gutter
   ============================================================ */

/*
 * Default
 */

/* Horizontal */
.#{$prefix}grid {
	margin-left: (-$grid-gutter-horizontal);
}

.#{$prefix}grid > * {
	padding-left: $grid-gutter-horizontal;
}

/* Vertical */
.#{$prefix}grid + .#{$prefix}grid,
.#{$prefix}grid > .#{$prefix}grid-margin,
* + .#{$prefix}grid-margin {
	margin-top: $grid-gutter-vertical;
}

/* Desktop and bigger */
@include respond-to(large) {
	.#{$prefix}grid {
		margin-left: (-$grid-gutter-horizontal-l);
	}

	.#{$prefix}grid > * {
		padding-left: $grid-gutter-horizontal-l;
	}

	.#{$prefix}grid + .#{$prefix}grid,
	.#{$prefix}grid > .#{$prefix}grid-margin,
	* + .#{$prefix}grid-margin {
		margin-top: $grid-gutter-vertical-l;
	}
}

/*
 * Small
 */

/* Horizontal */
.#{$prefix}grid-small {
	margin-left: (-$grid-small-gutter-horizontal);
}

.#{$prefix}grid-small > * {
	padding-left: $grid-small-gutter-horizontal;
}

/* Vertical */
.#{$prefix}grid + .#{$prefix}grid-small,
.#{$prefix}grid-small > .#{$prefix}grid-margin,
* + .#{$prefix}grid-margin-small {
	margin-top: $grid-small-gutter-vertical;
}

/*
 * Medium
 */

/* Horizontal */
.#{$prefix}grid-medium {
	margin-left: (-$grid-medium-gutter-horizontal);
}

.#{$prefix}grid-medium > * {
	padding-left: $grid-medium-gutter-horizontal;
}

/* Vertical */
.#{$prefix}grid + .#{$prefix}grid-medium,
.#{$prefix}grid-medium > .#{$prefix}grid-margin,
* + .#{$prefix}grid-margin-medium {
	margin-top: $grid-medium-gutter-vertical;
}

/*
 * Large
 */

/* Horizontal */
.#{$prefix}grid-large {
	margin-left: (-$grid-large-gutter-horizontal);
}

.#{$prefix}grid-large > * {
	padding-left: $grid-large-gutter-horizontal;
}

/* Vertical */
.#{$prefix}grid + .#{$prefix}grid-large,
.#{$prefix}grid-large > .#{$prefix}grid-margin,
* + .#{$prefix}grid-margin-large {
	margin-top: $grid-large-gutter-vertical;
}

/* Desktop and bigger */
@include respond-to(large) {
	.#{$prefix}grid-large {
		margin-left: (-$grid-large-gutter-horizontal-l);
	}

	.#{$prefix}grid-large > * {
		padding-left: $grid-large-gutter-horizontal-l;
	}

	.#{$prefix}grid + .#{$prefix}grid-large,
	.#{$prefix}grid-large > .#{$prefix}grid-margin,
	* + .#{$prefix}grid-margin-large {
		margin-top: $grid-large-gutter-vertical-l;
	}
}

/*
 * Collapse
 */

/* Horizontal */
.#{$prefix}grid-collapse {
	margin-left: 0;
}

.#{$prefix}grid-collapse > * {
	padding-left: 0;
}

/* Vertical */
.#{$prefix}grid + .#{$prefix}grid-collapse,
.#{$prefix}grid-collapse > .#{$prefix}grid-margin {
	margin-top: 0;
}

/* Divider
   ============================================================ */

.#{$prefix}grid-divider > * {
	position: relative;
}

.#{$prefix}grid-divider > :not(.uis-first-column):before {
	content: '';
	position: absolute;
	top: 0;
	bottom: 0;
	border-left: $grid-divider-border-width solid $grid-divider-border;
}

.#{$prefix}grid-divider.#{$prefix}grid-stock > .#{$prefix}grid-margin:before {
	content: '';
	position: absolute;
	left: 0;
	right: 0;
	border-top: $grid-divider-border-width solid $grid-divider-border;
}

/*
 * Default
 */

/* Horizontal */
.#{$prefix}grid-divider {
	margin-left: (-$grid-gutter-horizontal * 2);
}

.#{$prefix}grid-divider > * {
	padding-left: $grid-gutter-horizontal * 2;
}

.#{$prefix}grid-divider > :not(.uis-first-column):before {
	left: $grid-gutter-horizontal;
}

/* Vertical */
.#{$prefix}grid-divider.#{$prefix}grid-stack > .#{$prefix}grid-margin {
	margin-top: ($grid-gutter-horizontal * 2);
}

.#{$prefix}grid-divider.#{$prefix}grid-stack > .#{$prefix}grid-margin:before {
	top: (-$grid-gutter-vertical);
	left: ($grid-gutter-horizontal * 2);
}

/* Desktop and bigger */
@include respond-to(large) {
	/* Horizontal */
	.#{$prefix}grid-divider {
		margin-left: (-$grid-gutter-horizontal-l * 2);
	}

	.#{$prefix}grid-divider > * {
		padding-left: $grid-gutter-horizontal-l * 2;
	}

	.#{$prefix}grid-divider > :not(.uis-first-column):before {
		left: $grid-gutter-horizontal-l;
	}

	/* Vertical */
	.#{$prefix}grid-divider .#{$prefix}grid-stack > .#{$prefix}grid-margin {
		margin-top: ($grid-gutter-horizontal-l * 2);
	}

	.#{$prefix}grid-divider .#{$prefix}grid-stack > .#{$prefix}grid-margin:before {
		top: (-$grid-gutter-vertical-l);
		left: ($grid-gutter-horizontal-l * 2);
	}
}

/*
 * Small
 */

/* Horizontal */
.#{$prefix}grid-divider .#{$prefix}grid-small {
	margin-left: (-$grid-small-gutter-horizontal * 2);
}

.#{$prefix}grid-divider .#{$prefix}grid-small > * {
	padding-left: $grid-small-gutter-horizontal * 2;
}

.#{$prefix}grid-divider .#{$prefix}grid-small > :not(.uis-first-column):before {
	left: $grid-small-gutter-horizontal;
}

/* Vertical */
.#{$prefix}grid-divider .#{$prefix}grid-small .#{$prefix}grid-stack > .#{$prefix}grid-margin {
	margin-top: ($grid-small-gutter-horizontal * 2);
}

.#{$prefix}grid-divider
	.#{$prefix}grid-small
	.#{$prefix}grid-stack
	> .#{$prefix}grid-margin:before {
	top: (-$grid-small-gutter-vertical);
	left: ($grid-small-gutter-horizontal * 2);
}

/*
 * Medium
 */

/* Horizontal */
.#{$prefix}grid-divider .#{$prefix}grid-medium {
	margin-left: (-$grid-medium-gutter-horizontal * 2);
}

.#{$prefix}grid-divider .#{$prefix}grid-medium > * {
	padding-left: $grid-medium-gutter-horizontal * 2;
}

.#{$prefix}grid-divider .#{$prefix}grid-medium > :not(.uis-first-column):before {
	left: $grid-medium-gutter-horizontal;
}

/* Vertical */
.#{$prefix}grid-divider .#{$prefix}grid-medium .#{$prefix}grid-stack > .#{$prefix}grid-margin {
	margin-top: ($grid-medium-gutter-horizontal * 2);
}

.#{$prefix}grid-divider
	.#{$prefix}grid-medium
	.#{$prefix}grid-stack
	> .#{$prefix}grid-margin:before {
	top: (-$grid-medium-gutter-vertical);
	left: ($grid-medium-gutter-horizontal * 2);
}

/*
 * Large
 */

/* Horizontal */
.#{$prefix}grid-divider .#{$prefix}grid-large {
	margin-left: (-$grid-large-gutter-horizontal * 2);
}

.#{$prefix}grid-divider .#{$prefix}grid-large > * {
	padding-left: $grid-large-gutter-horizontal * 2;
}

.#{$prefix}grid-divider .#{$prefix}grid-large > :not(.uis-first-column):before {
	left: $grid-large-gutter-horizontal;
}

/* Vertical */
.#{$prefix}grid-divider .#{$prefix}grid-large .#{$prefix}grid-stack > .#{$prefix}grid-margin {
	margin-top: ($grid-large-gutter-horizontal * 2);
}

.#{$prefix}grid-divider
	.#{$prefix}grid-large
	.#{$prefix}grid-stack
	> .#{$prefix}grid-margin:before {
	top: (-$grid-large-gutter-vertical);
	left: ($grid-large-gutter-horizontal * 2);
}

/* Desktop and bigger */
@include respond-to(large) {
	/* Horizontal */
	.#{$prefix}grid-divider .#{$prefix}grid-large {
		margin-left: (-$grid-large-gutter-horizontal-l * 2);
	}

	.#{$prefix}grid-divider .#{$prefix}grid-large > * {
		padding-left: $grid-large-gutter-horizontal-l * 2;
	}

	.#{$prefix}grid-divider .#{$prefix}grid-large > :not(.uis-first-column):before {
		left: $grid-large-gutter-horizontal-l;
	}

	/* Vertical */
	.#{$prefix}grid-divider .#{$prefix}grid-large .#{$prefix}grid-stack > .#{$prefix}grid-margin {
		margin-top: ($grid-large-gutter-horizontal-l * 2);
	}

	.#{$prefix}grid-divider
		.#{$prefix}grid-large
		.#{$prefix}grid-stack
		> .#{$prefix}grid-margin:before {
		top: (-$grid-gutter-vertical-l);
		left: ($grid-gutter-horizontal-l * 2);
	}
}

/* Match child of a grid cell
   ============================================================ */

/*
 * Behave like a block element
 * 1. Wrap into the next line
 * 2. Take the full width of at leaset 100%, Only if no class from width
 *    component is set.
 * 3. Expand width even if larger than 100%. e.g. because of negative
 *    margin (Needed for nested grids)
 */

.#{$prefix}grid-match > *,
.#{$prefix}grid-item-match {
	display: flex;

	/* 1 */
	flex-wrap: wrap;
}

.#{$prefix}grid-match > * > :not([class*='uis-width']),
.#{$prefix}grid-item-match > :not([class*='uis-width']) {
	/* 2 */
	box-sizing: border-box;
	width: 100%;

	/* 3 */
	flex: auto;
}
