/*
 * create equal widths with breakpoints
 */
@mixin create-child-width-with-breakpoints {
	// 1. Reset the `min-width` which is set to auyto by default, because
	// flex items won't shrink below their minimum intrinsic content size
	// Using 1px` instead of `0`, so items still wrap into the next line.
	// if they have zero width and padding and the predecessor is 100% wide.
	$childwidth: (
		#{$prefix}child-width:
			(
				box-sizing: border-box,
				width: 100%,
			),
		#{$prefix}child-width-1-1:
			(
				width: 100%,
			),
		#{$prefix}child-width-1-2:
			(
				width: 50%,
			),
		#{$prefix}child-width-1-3:
			(
				width: unquote('calc(100% * 1 / 3.001)'),
			),
		#{$prefix}child-width-1-4:
			(
				width: 25%,
			),
		#{$prefix}child-width-1-5:
			(
				width: 20%,
			),
		#{$prefix}child-width-1-6:
			(
				width: unquote('calc(100% * 1 / 6.001)'),
			),
		#{$prefix}child-width-auto:
			(
				width: auto,
			),
		#{$prefix}child-width-expand:
			(
				flex: 1,

				/* 1 */ min-width: 1px,
			)
	);

	// create child widths
	@each $classname, $style in $childwidth {
		@if ($classname == '#{$prefix}child-width') {
			[class*='#{$classname}'] > * {
				@each $property, $value in $style {
					#{$property}: #{$value};
				}
			}
		} @else if ($classname == '#{$prefix}child-width-expand') {
			.#{$classname} > :not([class*='uis-width']) {
				@each $property, $value in $style {
					#{$property}: #{$value};
				}
			}
		} @else {
			@if ($classname != '#{$prefix}child-width-1-1') {
				.#{$classname} > * {
					@each $property, $value in $style {
						#{$property}: #{$value};
					}
				}
			}
		}
	}

	// create breakpoins of child widths
	@each $size, $value in $breakpoint {
		@include respond-to($size) {
			@each $classname, $style in $childwidth {
				@include generate-child-width($size, $classname, $style);
			}
		}
	}
}

@mixin generate-child-width($size, $classname, $style) {
	$condition: if(
		$classname == '#{$prefix}child-width-expand',
		':not([class*=' uis-width '])',
		'*'
	);

	@if ($classname != '#{$prefix}child-width') {
		@if ($size == 'small') {
			.#{$classname + '\\@s'} > #{$condition} {
				@each $property, $value in $style {
					#{$property}: #{$value};
				}
			}
		} @else if ($size == 'medium') {
			.#{$classname + '\\@m'} > #{$condition} {
				@each $property, $value in $style {
					#{$property}: #{$value};
				}
			}
		} @else if ($size == 'large') {
			.#{$classname + '\\@l'} > #{$condition} {
				@each $property, $value in $style {
					#{$property}: #{$value};
				}
			}
		} @else if ($size == 'xlarge') {
			.#{$classname + '\\@xl'} > #{$condition} {
				@each $property, $value in $style {
					#{$property}: #{$value};
				}
			}
		} @else {
			@warn 'Error';
		}
	}
}

/*
 * Create a single width with breakpoints
 */
@mixin create-width-with-breakpoints {
	//
	// 1. `max-width` is needed for the pixel-based classes
	//
	$width: (
		#{$prefix}width:
			(
				box-sizing: border-box,
				width: 100%,

				/* 1 */ max-width: 100%,
			),

		#{$prefix}width-1-1:
			(
				width: 100%,
			),

		// Halves
		#{$prefix}width-1-2:
			(
				width: 50%,
			),

		// Thirds
		#{$prefix}width-1-3:
			(
				width: unquote('calc(100% * 1 / 3.001)'),
			),

		#{$prefix}width-2-3:
			(
				width: unquote('calc(100% * 2 / 3.001)'),
			),

		// Quarters
		#{$prefix}width-1-4:
			(
				width: 25%,
			),

		#{$prefix}width-3-4:
			(
				width: 75%,
			),

		// Fifths
		#{$prefix}width-1-5:
			(
				width: 20%,
			),

		#{$prefix}width-2-5:
			(
				width: 40%,
			),

		#{$prefix}width-3-5:
			(
				width: 60%,
			),

		#{$prefix}width-4-5:
			(
				width: 80%,
			),

		// Sixths
		#{$prefix}width-1-6:
			(
				width: unquote('calc(100% * 1 / 6.001)'),
			),

		#{$prefix}width-5-6:
			(
				width: unquote('calc(100% * 5 / 6.001)'),
			),

		// Auto
		#{$prefix}width-auto:
			(
				width: auto,
			),

		//Expand
		#{$prefix}width-expand:
			(
				flex: 1,
				min-width: 1px,
			)
	);

	// create single widths
	@each $classname, $style in $width {
		$condition: if(
			$classname == '#{$prefix}width',
			'[class*=' #{$classname}']',
			'.#{$classname}'
		);

		#{$condition} {
			@each $property, $value in $style {
				#{$property}: #{$value};
			}
		}
	}

	// create breakpoints of single widths
	@each $size, $value in $breakpoint {
		@include respond-to($size) {
			@each $classname, $style in $width {
				@include generate-width($size, $classname, $style);
			}
		}
	}
}

@mixin generate-width($size, $classname, $style) {
	@if ($classname != '#{$prefix}width') {
		@if ($size == 'small') {
			.#{$classname + '\\@s'} {
				@each $property, $value in $style {
					#{$property}: #{$value};
				}
			}
		} @else if ($size == 'medium') {
			.#{$classname + '\\@m'} {
				@each $property, $value in $style {
					#{$property}: #{$value};
				}
			}
		} @else if ($size == 'large') {
			.#{$classname + '\\@l'} {
				@each $property, $value in $style {
					#{$property}: #{$value};
				}
			}
		} @else if ($size == 'xlarge') {
			.#{$classname + '\\@xl'} {
				@each $property, $value in $style {
					#{$property}: #{$value};
				}
			}
		} @else {
			@warn 'error';
		}
	}
}

/*
 * Create pixel based widths
 */

@mixin create-width-pixel-based {
	$pixel-width: (
		small: 150px,
		medium: 300px,
		large: 450px,
		xlarge: 600px,
		xxlarge: 750px,
	);

	@each $property, $value in $pixel-width {
		.#{$prefix}width-#{$property} {
			width: #{$value};
		}
	}
}

/*
 * Create column width modifiers
 */

@mixin create-column-width-modifiers {
	$column: (
		#{$prefix}column-1-2: 2,
		#{$prefix}column-1-3: 3,
		#{$prefix}column-1-4: 4,
		#{$prefix}column-1-5: 5,
		#{$prefix}column-1-6: 6
	);

	// create column width modifiers
	@each $classname, $count in $column {
		.#{$classname} {
			column-count: $count;
		}
	}

	// create column width modifiers breakpoints
	@each $size, $value in $breakpoint {
		@include respond-to($size) {
			@each $classname, $count in $column {
				@include generate-column($size, $classname, $count);
			}
		}
	}
}

@mixin generate-column($size, $classname, $count) {
	@if ($size == 'small') {
		.#{$classname + '\\@s'} {
			column-count: $count;
		}
	} @else if ($size == 'medium') {
		.#{$classname + '\\@m'} {
			column-count: $count;
		}
	} @else if ($size == 'large') {
		.#{$classname + '\\@l'} {
			column-count: $count;
		}
	} @else if ($size == 'xlarge') {
		.#{$classname + '\\@xl'} {
			column-count: $count;
		}
	} @else {
		@warn 'Error at generate column';
	}
}
